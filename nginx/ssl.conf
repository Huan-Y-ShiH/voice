# HTTPS 服务器配置
server {
    listen 443 ssl;
    server_name www.srtp.site srtp.site;

    # SSL 证书配置
    ssl_certificate /etc/letsencrypt/live/www.srtp.site/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/www.srtp.site/privkey.pem;

    # SSL 配置优化
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_stapling on;
    ssl_stapling_verify on;
    add_header Strict-Transport-Security "max-age=31536000" always;

    # 网站根目录
    root C:/Users/86198/srtp-app/build;
    index index.html;

    # 静态文件缓存配置
    location ~* \.(js|css)$ {
        expires 7d;
        add_header Cache-Control "public, no-transform";
    }

    location ~* \.(png|jpg|jpeg|gif|ico|svg)$ {
        expires 30d;
        add_header Cache-Control "public, no-transform";
    }

    # Service Worker配置
    location /service-worker.js {
        add_header Cache-Control "no-cache";
        expires 0;
    }

    # API代理配置
    location /api/ {
        proxy_pass http://49.232.143.161:3001/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        
        # CORS配置
        add_header 'Access-Control-Allow-Origin' '*';
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
    }

    # 所有其他请求都指向index.html
    location / {
        try_files $uri $uri/ /index.html;
    }
}

# HTTP 重定向到 HTTPS
server {
    listen 80;
    server_name www.srtp.site srtp.site;
    return 301 https://$server_name$request_uri;
} 